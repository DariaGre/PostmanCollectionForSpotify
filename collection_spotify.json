{
	"info": {
		"_postman_id": "a3f6e6cd-eda8-45e2-a6b0-003d4a6a7bd2",
		"name": "Spotify for GitHub",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "User Profile",
					"item": [
						{
							"name": "Full Current User's Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify response body schema\r",
											"var schema = {\r",
											"    \"type\" : \"object\",\r",
											"    \"properties\" : { \r",
											"        \"country\": {\"type\" : \"string\"},\r",
											"        \"display_name\":  {\"type\" : \"string\"},\r",
											"        \"email\":  {\"type\" : \"string\"},\r",
											"        \"explicit_content\": {\r",
											"            \"type\" : \"object\",\r",
											"            \"properties\" : {\r",
											"            \"filter_enabled\":  {\"type\" : \"boolean\"},\r",
											"            \"filter_locked\":  {\"type\" : \"boolean\"},\r",
											"            }\r",
											"        },\r",
											"        \"external_urls\": {\r",
											"            \"type\" : \"object\",\r",
											"            \"properties\" : {\r",
											"            \"{key}\" : {\"type\" : \"string\"},\r",
											"            \"{value}\" : {\"type\" : \"string\"},\r",
											"            },\r",
											"    },\r",
											"    \"followers\": {\r",
											"            \"type\" : \"object\",\r",
											"            \"properties\" : {\r",
											"            \"href\": {\"type\" : \"null\"},\r",
											"            \"total\": {\"type\" : \"integer\"},\r",
											"        }\r",
											"    },\r",
											"    \"href\": {\"type\" : \"string\"},\r",
											"    \"id\": {\"type\" : \"string\"},\r",
											"    \"images\": {\r",
											"            \"type\" : \"array\",\r",
											"            \"properties\" : {\r",
											"                \"height\" : {\"type\" : \"integer\"},\r",
											"                \"url\" : {\"type\" : \"string\"},\r",
											"                \"width\" : {\"type\" : \"integer\"},\r",
											"            }\r",
											"    },\r",
											"    \"product\": {\"type\" : \"string\"},\r",
											"    \"type\": {\"type\" : \"string\"},\r",
											"    \"uri\": {\"type\" : \"string\"},\r",
											"    },\r",
											"    \"required\": [\r",
											"         \"country\", \r",
											"         \"display_name\", \r",
											"         \"email\", \r",
											"         \"explicit_content\",\r",
											"         \"external_urls\",\r",
											"         \"followers\",\r",
											"         \"href\",\r",
											"         \"id\",\r",
											"         \"images\",\r",
											"         \"product\",\r",
											"         \"type\",\r",
											"         \"uri\",\r",
											"    ]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"   pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"//Create variable user id for next request\r",
											"if (pm.response.to.have.status(200) && pm.response.to.have.jsonSchema(schema)) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"user_id\", jsonData.id);\r",
											"};"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api.spotify.com/v1/me",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a User's Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify response body schema\r",
											"var schema = {\r",
											"    \"type\" : \"object\",\r",
											"    \"properties\" : { \r",
											"        \"display_name\":  {\"type\" : \"string\"},\r",
											"        \"external_urls\": {\r",
											"            \"type\" : \"object\",\r",
											"            \"properties\" : {\r",
											"            \"{key}\" : {\"type\" : \"string\"},\r",
											"            \"{value}\" : {\"type\" : \"string\"},\r",
											"            },\r",
											"    },\r",
											"    \"followers\": {\r",
											"            \"type\" : \"object\",\r",
											"            \"properties\" : {\r",
											"            \"href\": {\"type\" : \"null\"},\r",
											"            \"total\": {\"type\" : \"integer\"},\r",
											"        }\r",
											"    },\r",
											"    \"href\": {\"type\" : \"string\"},\r",
											"    \"id\": {\"type\" : \"string\"},\r",
											"    \"images\": {\r",
											"            \"type\" : \"array\",\r",
											"            \"properties\" : {\r",
											"                \"height\" : {\"type\" : \"integer\"},\r",
											"                \"url\" : {\"type\" : \"string\"},\r",
											"                \"width\" : {\"type\" : \"integer\"},\r",
											"            }\r",
											"    },\r",
											"    \"type\": {\"type\" : \"string\"},\r",
											"    \"uri\": {\"type\" : \"string\"},\r",
											"    },\r",
											"     \"required\": [\r",
											"         \"display_name\",\r",
											"         \"external_urls\",\r",
											"         \"followers\",\r",
											"         \"href\",\r",
											"         \"id\",\r",
											"         \"images\",\r",
											"         \"type\",\r",
											"         \"uri\",\r",
											"     ]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"   pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api.spotify.com/v1/users/{{user_id}}",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//Verify response status code (200)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Verify Content-Type header (JSON)",
									"pm.test(\"Content-Type in JSON format\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Playlist flow",
					"item": [
						{
							"name": "Create playlist (private)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify Content-Type header (JSON)\r",
											"pm.test(\"Content-Type is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Verify response body schema\r",
											"var schema = {\r",
											"    \"type\" : \"object\",\r",
											"    \"properties\" : { \r",
											"        \"collaborative\":  {\"type\" : \"boolean\"},\r",
											"        \"description\": {\"type\" : [\"string\", \"null\"]},\r",
											"        \"external_urls\" : {\r",
											"            \"type\" : \"object\",\r",
											"            \"properties\" : {\r",
											"            \"{key}\" : {\"type\" : \"string\"},\r",
											"            \"{value}\" : {\"type\" : \"string\"},\r",
											"            },\r",
											"        },\r",
											"        \"followers\": {\r",
											"            \"type\" : \"object\",\r",
											"            \"properties\" : {\r",
											"            \"href\": {\"type\" : \"null\"},\r",
											"            \"total\": {\"type\" : \"integer\"},\r",
											"            }\r",
											"        },\r",
											"        \"href\": {\"type\" : \"string\"},\r",
											"        \"id\": {\"type\" : \"string\"},\r",
											"        \"images\": {\r",
											"            \"type\" : \"array\",\r",
											"            \"properties\" : {\r",
											"                \"height\" : {\"type\" : \"integer\"},\r",
											"                \"url\" : {\"type\" : \"string\"},\r",
											"                \"width\" : {\"type\" : \"integer\"},\r",
											"            }\r",
											"        },\r",
											"        \"name\": {\"type\" : \"string\"},\r",
											"        \"owner\": {\r",
											"            \"type\" : \"object\",\r",
											"            \"properties\" : {\r",
											"                \"display_name\" : {\"type\" : \"string\"},\r",
											"                \"external_urls\" : {\r",
											"                    \"type\" : \"object\",\r",
											"                    \"properties\" : {\r",
											"                    \"{key}\" : {\"type\" : \"string\"},\r",
											"                    \"{value}\" : {\"type\" : \"string\"},\r",
											"                    },\r",
											"                },\r",
											"                \"followers\": {\r",
											"                    \"type\" : \"object\",\r",
											"                    \"properties\" : {\r",
											"                    \"href\": {\"type\" : \"null\"},\r",
											"                    \"total\": {\"type\" : \"integer\"},\r",
											"                    }\r",
											"                },\r",
											"                \"href\" : {\"type\" : \"string\"},\r",
											"                \"id\" : {\"type\" : \"string\"},\r",
											"                \"images\": {\r",
											"                    \"type\" : \"array\",\r",
											"                    \"properties\" : {\r",
											"                        \"height\" : {\"type\" : \"integer\"},\r",
											"                        \"url\" : {\"type\" : \"string\"},\r",
											"                        \"width\" : {\"type\" : \"integer\"},\r",
											"                            }\r",
											"                        },\r",
											"                \"type\" : {\"type\" : \"string\"},\r",
											"                \"uri\" : {\"type\" : \"string\"},\r",
											"            }\r",
											"        },\r",
											"        \"public\" : {\"type\" : [\"boolean\", \"null\"]},\r",
											"        \"snapshot_id\" : {\"type\" : \"string\"},\r",
											"        \"tracks\": {\r",
											"            \"type\" : \"object\",\r",
											"            \"properties\" : {\r",
											"                \"href\": {\"type\" : \"string\"},\r",
											"                \"items\": {\"type\" : \"array\"},\r",
											"                \"limit\": {\"type\" : \"integer\"},\r",
											"                \"next\": {\"type\" : [\"string\", \"null\"]},\r",
											"                \"offset\": {\"type\" : \"integer\"},\r",
											"                \"previous\": {\"type\" : [\"string\", \"null\"]},\r",
											"                \"total\": {\"type\" : \"integer\"},\r",
											"                }\r",
											"            },\r",
											"        \"type\" : {\"type\" : \"string\"},\r",
											"        \"uri\" : {\"type\" : \"string\"}\r",
											"    },\r",
											"        \"required\": [\r",
											"            \"name\",\r",
											"            \"public\",\r",
											"            \"collaborative\",\r",
											"            \"description\",\r",
											"        ]\r",
											"    };\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"   pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"//Create environment variables: playlist id and playlist name \r",
											"if (pm.expect(pm.response.code).to.be.oneOf([200,201,202]) && pm.response.to.have.jsonSchema(schema)) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"playlist_id\", jsonData.id)\r",
											"    pm.environment.set(\"playlist_name\", jsonData.name);\r",
											"};\r",
											"\r",
											"//Check \"location\" header\r",
											"pm.test(\"Check location in headers\", function () {\r",
											"    pm.response.to.have.header(\"location\");\r",
											"});\r",
											"\r",
											"//Verify value \"collaborative\" property (true)\r",
											"pm.test(\"Collaborative is true \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.collaborative).to.eql(true);\r",
											"});\r",
											"\r",
											"//Verify value \"public\" property (false)\r",
											"pm.test(\"Public is false \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.public).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"Playlist for {{$randomFirstName}}\",\r\n    \"public\" : false,\r\n    \"collaborative\" : true,\r\n    \"description\" : \"The private playlist\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.spotify.com/v1/users/{{user_id}}/playlists",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"users",
										"{{user_id}}",
										"playlists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create playlist (not unique name, public)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify Content-Type header (JSON)\r",
											"pm.test(\"Content-Type is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Verify response body schema\r",
											"var schema = {\r",
											"    \"type\" : \"object\",\r",
											"    \"properties\" : { \r",
											"        \"collaborative\":  {\"type\" : \"boolean\"},\r",
											"        \"description\": {\"type\" : [\"string\", \"null\"]},\r",
											"        \"external_urls\" : {\r",
											"            \"type\" : \"object\",\r",
											"            \"properties\" : {\r",
											"            \"{key}\" : {\"type\" : \"string\"},\r",
											"            \"{value}\" : {\"type\" : \"string\"},\r",
											"            },\r",
											"        },\r",
											"        \"followers\": {\r",
											"            \"type\" : \"object\",\r",
											"            \"properties\" : {\r",
											"            \"href\": {\"type\" : \"null\"},\r",
											"            \"total\": {\"type\" : \"integer\"},\r",
											"            }\r",
											"        },\r",
											"        \"href\": {\"type\" : \"string\"},\r",
											"        \"id\": {\"type\" : \"string\"},\r",
											"        \"images\": {\r",
											"            \"type\" : \"array\",\r",
											"            \"properties\" : {\r",
											"                \"height\" : {\"type\" : \"integer\"},\r",
											"                \"url\" : {\"type\" : \"string\"},\r",
											"                \"width\" : {\"type\" : \"integer\"},\r",
											"            }\r",
											"        },\r",
											"        \"name\": {\"type\" : \"string\"},\r",
											"        \"owner\": {\r",
											"            \"type\" : \"object\",\r",
											"            \"properties\" : {\r",
											"                \"display_name\" : {\"type\" : \"string\"},\r",
											"                \"external_urls\" : {\r",
											"                    \"type\" : \"object\",\r",
											"                    \"properties\" : {\r",
											"                    \"{key}\" : {\"type\" : \"string\"},\r",
											"                    \"{value}\" : {\"type\" : \"string\"},\r",
											"                    },\r",
											"                },\r",
											"                \"followers\": {\r",
											"                    \"type\" : \"object\",\r",
											"                    \"properties\" : {\r",
											"                    \"href\": {\"type\" : \"null\"},\r",
											"                    \"total\": {\"type\" : \"integer\"},\r",
											"                    }\r",
											"                },\r",
											"                \"href\" : {\"type\" : \"string\"},\r",
											"                \"id\" : {\"type\" : \"string\"},\r",
											"                \"images\": {\r",
											"                    \"type\" : \"array\",\r",
											"                    \"properties\" : {\r",
											"                        \"height\" : {\"type\" : \"integer\"},\r",
											"                        \"url\" : {\"type\" : \"string\"},\r",
											"                        \"width\" : {\"type\" : \"integer\"},\r",
											"                            }\r",
											"                        },\r",
											"                \"type\" : {\"type\" : \"string\"},\r",
											"                \"uri\" : {\"type\" : \"string\"},\r",
											"            }\r",
											"        },\r",
											"        \"public\" : {\"type\" : [\"boolean\", \"null\"]},\r",
											"        \"snapshot_id\" : {\"type\" : \"string\"},\r",
											"        \"tracks\": {\r",
											"            \"type\" : \"object\",\r",
											"            \"properties\" : {\r",
											"                \"href\": {\"type\" : \"string\"},\r",
											"                \"items\": {\"type\" : \"array\"},\r",
											"                \"limit\": {\"type\" : \"integer\"},\r",
											"                \"next\": {\"type\" : [\"string\", \"null\"]},\r",
											"                \"offset\": {\"type\" : \"integer\"},\r",
											"                \"previous\": {\"type\" : [\"string\", \"null\"]},\r",
											"                \"total\": {\"type\" : \"integer\"},\r",
											"                }\r",
											"            },\r",
											"        \"type\" : {\"type\" : \"string\"},\r",
											"        \"uri\" : {\"type\" : \"string\"}\r",
											"    },\r",
											"        \"required\": [\r",
											"            \"name\",\r",
											"            \"public\",\r",
											"            \"collaborative\",\r",
											"            \"description\",\r",
											"        ]\r",
											"    };\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"   pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"//Check \"location\" header\r",
											"pm.test(\"Check location in headers\", function () {\r",
											"    pm.response.to.have.header(\"location\");\r",
											"});\r",
											"\r",
											"//Verify value \"collaborative\" property (defaults to false)\r",
											"pm.test(\"Collaborative is false \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.collaborative).to.eql(false);\r",
											"});\r",
											"\r",
											"//Verify value \"public\" property (defaults to true)\r",
											"pm.test(\"Public is true \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.public).to.eql(true);\r",
											"});\r",
											"\r",
											"//Check playlist name is equal {{playlist_name}}\r",
											"pm.test(\"Playlist name is duplicate\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"playlist_name\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"{{playlist_name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.spotify.com/v1/users/{{user_id}}/playlists",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"users",
										"{{user_id}}",
										"playlists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Items to a Playlist (through body)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify Content-Type header (JSON)\r",
											"pm.test(\"Content-Type is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Verify response body schema\r",
											"var schema = {\r",
											"    \"type\" : \"object\",\r",
											"    \"properties\" : { \r",
											"        \"snapshot_id\":  {\"type\" : \"string\"}\r",
											"        },\r",
											"        \"required\": [\r",
											"            \"snapshot_id\"\r",
											"        ]\r",
											"    };\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"   pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uris\": [\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\",\r\n    \"spotify:track:2DIw6TTRCGRQb07jpwU5Lo\",\r\n    \"spotify:track:1njtH8PzXon812lONDSXJi\",\r\n    \"spotify:track:2FRnf9qhLbvw8fu4IBXx78\",\r\n    \"spotify:track:7gtf27x5BZ183iSHMIlyV8\"\r\n],\r\n    \"position\": 0\r\n}"
								},
								"url": {
									"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"playlists",
										"{{playlist_id}}",
										"tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for a tracks",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*//Search for a tracks and save them to environment variable \"uris_track\"\r",
											"pm.sendRequest({\r",
											"    url: 'https://api.spotify.com/v1/search?q=a&type=track&limit=30',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, response) {\r",
											"    var uris = [];\r",
											"    for(var i = 0; i < 30; i++) {\r",
											"        uris.push(response.json().tracks.items[i].uri);\r",
											"        };\r",
											"    console.log(uris);\r",
											"    pm.environment.set(\"uris_tracks\", uris);\r",
											"}\r",
											");\r",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Save tracks to environment variable \"uris_track\" for next request\r",
											"if (pm.expect(pm.response.code).to.be.oneOf([200,201,202])) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var uris = [];\r",
											"    for(var i = 0; i < 30; i++) {\r",
											"        uris.push(jsonData.tracks.items[i].uri);\r",
											"        };\r",
											"    console.log(uris);\r",
											"pm.environment.set(\"uris_tracks\", uris)\r",
											"};"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://api.spotify.com/v1/search?q=a&type=track&limit=30",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "a"
										},
										{
											"key": "type",
											"value": "track"
										},
										{
											"key": "limit",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Items to a Playlist (through query)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*//Search for a tracks and save them to environment variable \"uris_track\"\r",
											"pm.sendRequest({\r",
											"    url: 'https://api.spotify.com/v1/search?q=a&type=track&limit=30',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, response) {\r",
											"    var uris = [];\r",
											"    for(var i = 0; i < 30; i++) {\r",
											"        uris.push(response.json().tracks.items[i].uri);\r",
											"        };\r",
											"    console.log(uris);\r",
											"    pm.environment.set(\"uris_tracks\", uris);\r",
											"}\r",
											");*/\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify response body schema\r",
											"var schema = {\r",
											"    \"type\" : \"object\",\r",
											"    \"properties\" : { \r",
											"        \"snapshot_id\":  {\"type\" : \"string\"}\r",
											"        },\r",
											"        \"required\": [\r",
											"            \"snapshot_id\"\r",
											"        ]\r",
											"    };\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"   pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"//Create environment variable - playlist version \r",
											"if (pm.expect(pm.response.code).to.be.oneOf([200,201,202]) && pm.response.to.have.jsonSchema(schema)) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"playlist_version\", jsonData.snapshot_id)\r",
											"};"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "//This track doesn't be added to the playlist, check in the \"Get a Playlist's Items\" request\r\n{\r\n    \"uris\" : [\r\n        {{uri_track}}\r\n    ]\r\n}"
								},
								"url": {
									"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks?uris={{uris_tracks}}",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"playlists",
										"{{playlist_id}}",
										"tracks"
									],
									"query": [
										{
											"key": "uris",
											"value": "{{uris_tracks}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get playlist",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Verify response body schema (\"fields\" query parameter) \r",
											"var schema = {\r",
											"    \"type\" : \"object\",\r",
											"    \"properties\" : { \r",
											"        \"tracks\":  {\r",
											"        \"type\" : \"object\",\r",
											"        \"properties\" : { \r",
											"            \"items\" : {\r",
											"            \"type\" : \"array\",\r",
											"            \"properties\" : {\r",
											"                \"added_by\" : {\r",
											"                    \"type\" : \"object\",\r",
											"                    \"properties\" : {\r",
											"                        \"id\" : {\"type\" : \"string\"},\r",
											"                        },\r",
											"                    \"required\" : [\"id\"]\r",
											"                },\r",
											"                \"track\" : {\r",
											"                    \"type\" : \"object\",\r",
											"                    \"properties\" : {\r",
											"                        \"name\" : {\"type\" : \"string\"},\r",
											"                        },\r",
											"                    \"required\" : [\"name\"]\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"   pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}?fields=tracks.items(added_by(id),track(name))&market=RU",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"playlists",
										"{{playlist_id}}"
									],
									"query": [
										{
											"key": "fields",
											"value": "tracks.items(added_by(id),track(name))"
										},
										{
											"key": "market",
											"value": "RU"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a Playlist's Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Check track from \"Add Items to a Playlist (through query)\" request\r",
											"pm.test(\"Track URI didn't added\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(pm.environment.get(\"uri_track\"));\r",
											"});\r",
											"\r",
											"//Check offset value (query parameter)\r",
											"pm.test(\"Check offset value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.offset).to.eql(1);\r",
											"});\r",
											"\r",
											"//Create environment variable \"uri_remove\" for next request\r",
											"if (pm.expect(pm.response.code).to.be.oneOf([200,201,202])) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"uri_remove\", jsonData.items[0].track.uri);\r",
											"};\r",
											"\r",
											"/* It's draft for checking the number of tracks\r",
											"pm.test(\"Your test name\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.items[0].track.id).to.have.lengthOf(1);\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks?fields=items.track.uri,offset&limit=1&offset=1&market=from_token",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"playlists",
										"{{playlist_id}}",
										"tracks"
									],
									"query": [
										{
											"key": "fields",
											"value": "items.track.uri,offset"
										},
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "offset",
											"value": "1"
										},
										{
											"key": "market",
											"value": "from_token"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Items from a Playlist",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"tracks\": [\r\n        { \r\n        \"uri\": \"{{uri_remove}}\"\r\n        }\r\n    ] \r\n}"
								},
								"url": {
									"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"playlists",
										"{{playlist_id}}",
										"tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a Playlist Cover Image",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/images",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"playlists",
										"{{playlist_id}}",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change a Playlist's Details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"New playlist\"\r\n}"
								},
								"url": {
									"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"playlists",
										"{{playlist_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reorder a Playlist's Items",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"range_start\" : 0,\r\n    \"insert_before\"\t: 2 \r\n}"
								},
								"url": {
									"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"playlists",
										"{{playlist_id}}",
										"tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reorder a Playlist's Items Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"range_start\" : 0,\r\n    \"insert_before\"\t: 2 \r\n}"
								},
								"url": {
									"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"playlists",
										"{{playlist_id}}",
										"tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace a Playlist's Items",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"uris\": [\r\n        \"spotify:track:3FUTGNi9N7ADavxzlnKYTb\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"playlists",
										"{{playlist_id}}",
										"tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a List of Current User's Playlists",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api.spotify.com/v1/me/playlists",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"me",
										"playlists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a List of a User's Playlists",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://api.spotify.com/v1/users/{{user_id}}/playlists",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"users",
										"{{user_id}}",
										"playlists"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is OK\", () => {",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"});",
									"",
									"//Verify Content-Type header (JSON)",
									"pm.test(\"Content-Type is valid\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});"
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "redirect_uri",
						"value": "https://example.com/callback",
						"type": "string"
					},
					{
						"key": "scope",
						"value": "ugc-image-upload user-read-recently-played user-top-read user-read-playback-position user-read-playback-state user-modify-playback-state user-read-currently-playing playlist-modify-public playlist-modify-private playlist-read-private playlist-read-collaborative user-follow-modify user-follow-read user-library-modify user-library-read user-read-email user-read-private",
						"type": "string"
					},
					{
						"key": "useBrowser",
						"value": false,
						"type": "boolean"
					},
					{
						"key": "state",
						"value": "",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "Spotify Token",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "header",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "authorization_code",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "https://accounts.spotify.com/api/token",
						"type": "string"
					},
					{
						"key": "headerPrefix",
						"value": "Basic",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "4540246de42048fe907bba2a80771a15",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "0a40d08e189742b4a2616d7b19088b1c",
						"type": "string"
					},
					{
						"key": "password",
						"value": "12345678901990",
						"type": "string"
					},
					{
						"key": "username",
						"value": "tw2ojre6f2nxkxi3i118kxbty",
						"type": "string"
					},
					{
						"key": "authUrl",
						"value": "https://accounts.spotify.com/authorize",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "queryParams",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Get access token (without code)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response status code (400)\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//Verify Content-Type header (JSON)\r",
									"pm.test(\"Content-Type in JSON format\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});\r",
									"\r",
									"//Verify response body schema\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : { \r",
									"        \"error\":  {\"type\" : \"string\"},\r",
									"        \"error_description\": {\"type\" : \"string\"}\r",
									"        },\r",
									"    \"required\": [\r",
									"        \"error\",\r",
									"        \"error_description\"\r",
									"     ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{basic_auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "code",
									"value": "",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{redirect_uri}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://accounts.spotify.com/api/token",
							"protocol": "https",
							"host": [
								"accounts",
								"spotify",
								"com"
							],
							"path": [
								"api",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a List of Current User's Playlists, (exceeding the limit)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response status code (400)\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//Verify Content-Type header (JSON)\r",
									"pm.test(\"Content-Type in JSON format\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//Verify response body schema\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"error\" : {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"status\":  {\"type\" : \"integer\"},\r",
									"                \"message\": {\"type\" : \"string\"}\r",
									"                },\r",
									"        \"required\": [\r",
									"                \"status\",\r",
									"                \"message\"\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Invalid limit\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/playlists?limit=51",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"playlists"
							],
							"query": [
								{
									"key": "limit",
									"value": "51",
									"description": "Max - 50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a List of Current User's Playlists, (exceeding the offset)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response status code (400)\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//Verify Content-Type header (JSON)\r",
									"pm.test(\"Content-Type in JSON format\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//Verify response body schema\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"error\" : {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"status\":  {\"type\" : \"integer\"},\r",
									"                \"message\": {\"type\" : \"string\"}\r",
									"                },\r",
									"        \"required\": [\r",
									"                \"status\",\r",
									"                \"message\"\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/playlists?offset=100.001",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"playlists"
							],
							"query": [
								{
									"key": "offset",
									"value": "100.001",
									"description": "Max - 100000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current User's Profile (401 Unauthorized)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response status code (401)\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"//Verify Content-Type header (JSON)\r",
									"pm.test(\"Content-Type in JSON format\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});\r",
									"\r",
									"//Verify response body schema\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"error\" : {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"status\":  {\"type\" : \"integer\"},\r",
									"                \"message\": {\"type\" : \"string\"}\r",
									"                },\r",
									"        \"required\": [\r",
									"                \"status\",\r",
									"                \"message\"\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a User's Profile (404 Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response status code (404)\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Verify Content-Type header (JSON)\r",
									"pm.test(\"Content-Type in JSON format\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});\r",
									"\r",
									"//Verify response body schema\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"error\" : {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"status\":  {\"type\" : \"integer\"},\r",
									"                \"message\": {\"type\" : \"string\"}\r",
									"                },\r",
									"        \"required\": [\r",
									"                \"status\",\r",
									"                \"message\"\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/users/{{$randomUrl}}",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"users",
								"{{$randomUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create playlist (without name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response status code (400)\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//Verify Content-Type header (JSON)\r",
									"pm.test(\"Content-Type in JSON format\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//Verify response body schema\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"error\" : {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"status\":  {\"type\" : \"integer\"},\r",
									"                \"message\": {\"type\" : \"string\"}\r",
									"                },\r",
									"        \"required\": [\r",
									"                \"status\",\r",
									"                \"message\"\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Check the error message\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Missing required field: name\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/users/{{user_id}}/playlists",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"users",
								"{{user_id}}",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create playlist (the name contains more characters than the maximum)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response status code (400)\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//Verify Content-Type header (JSON)\r",
									"pm.test(\"Content-Type in JSON format\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//Verify response body schema\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"error\" : {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"status\":  {\"type\" : \"integer\"},\r",
									"                \"message\": {\"type\" : \"string\"}\r",
									"                },\r",
									"        \"required\": [\r",
									"                \"status\",\r",
									"                \"message\"\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"zZURwnBlmtmdWZ4CkvWPjCcDKWj05aJ71vNfhAZL5n0DIrFu09wF0pSmaiekobbDcsTiL3IOqfAcR7hURzNSK5nMAUQUWvBi4yxtID7jZL3pmDkajaZK5dl2c6aq4V0SM3EgwskPVqHYAV3h35rtoMNdMyEf3I8iZXWRjz6LCUX2UdRBhAIizrYmKEKGttrc8eDeuVlIA\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/users/{{user_id}}/playlists",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"users",
								"{{user_id}}",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for a tracks (exceeding the limit)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response status code (400)\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//Verify Content-Type header (JSON)\r",
									"pm.test(\"Content-Type in JSON format\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//Verify response body schema\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"error\" : {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"status\":  {\"type\" : \"integer\"},\r",
									"                \"message\": {\"type\" : \"string\"}\r",
									"                },\r",
									"        \"required\": [\r",
									"                \"status\",\r",
									"                \"message\"\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://api.spotify.com/v1/search?q=a&type=track&limit=51",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "a"
								},
								{
									"key": "type",
									"value": "track"
								},
								{
									"key": "limit",
									"value": "51",
									"description": "Max 50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for a tracks (less than the limit)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response status code (400)\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//Verify Content-Type header (JSON)\r",
									"pm.test(\"Content-Type in JSON format\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//Verify response body schema\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"error\" : {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"status\":  {\"type\" : \"integer\"},\r",
									"                \"message\": {\"type\" : \"string\"}\r",
									"                },\r",
									"        \"required\": [\r",
									"                \"status\",\r",
									"                \"message\"\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://api.spotify.com/v1/search?q=a&type=track&limit=0",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "a"
								},
								{
									"key": "type",
									"value": "track"
								},
								{
									"key": "limit",
									"value": "0",
									"description": "Min 1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for a tracks (exceeding the offset)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response status code (400)\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//Verify Content-Type header (JSON)\r",
									"pm.test(\"Content-Type in JSON format\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//Verify response body schema\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"error\" : {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"status\":  {\"type\" : \"integer\"},\r",
									"                \"message\": {\"type\" : \"string\"}\r",
									"                },\r",
									"        \"required\": [\r",
									"                \"status\",\r",
									"                \"message\"\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://api.spotify.com/v1/search?q=a&type=track&limit=2&offset=2,001",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "a"
								},
								{
									"key": "type",
									"value": "track"
								},
								{
									"key": "limit",
									"value": "2",
									"description": "Max 50"
								},
								{
									"key": "offset",
									"value": "2,001",
									"description": "Max 2,000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Items from a Playlist (without scopes)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response status code (403)\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"//Verify Content-Type header (JSON)\r",
									"pm.test(\"Content-Type in JSON format\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Verify response body schema\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"error\" : {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"status\":  {\"type\" : \"integer\"},\r",
									"                \"message\": {\"type\" : \"string\"}\r",
									"                },\r",
									"        \"required\": [\r",
									"                \"status\",\r",
									"                \"message\"\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"tracks\": [\r\n        { \r\n        \"uri\": \"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\" \r\n        },\r\n        { \r\n        \"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\" \r\n        }\r\n    ] \r\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}",
								"tracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reorder a Playlist's Items (another type for parameters)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify response status code (400)\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//Verify Content-Type header (JSON)\r",
									"pm.test(\"Content-Type in JSON format\", function () {\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//Verify response body schema\r",
									"var schema = {\r",
									"    \"type\" : \"object\",\r",
									"    \"properties\" : {\r",
									"        \"error\" : {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"status\":  {\"type\" : \"integer\"},\r",
									"                \"message\": {\"type\" : \"string\"}\r",
									"                },\r",
									"        \"required\": [\r",
									"                \"status\",\r",
									"                \"message\"\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"range_start\" : \"range start\",\r\n    \"insert_before\"\t: \"insert before\" \r\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}",
								"tracks"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "redirect_uri",
						"value": "https://example.com/callback",
						"type": "string"
					},
					{
						"key": "scope",
						"value": "user-read-private playlist-modify-public",
						"type": "string"
					},
					{
						"key": "useBrowser",
						"value": false,
						"type": "boolean"
					},
					{
						"key": "state",
						"value": "",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "Spotify Token",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "header",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "authorization_code",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "https://accounts.spotify.com/api/token",
						"type": "string"
					},
					{
						"key": "headerPrefix",
						"value": "Basic",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "4540246de42048fe907bba2a80771a15",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "0a40d08e189742b4a2616d7b19088b1c",
						"type": "string"
					},
					{
						"key": "password",
						"value": "12345678901990",
						"type": "string"
					},
					{
						"key": "username",
						"value": "tw2ojre6f2nxkxi3i118kxbty",
						"type": "string"
					},
					{
						"key": "authUrl",
						"value": "https://accounts.spotify.com/authorize",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "queryParams",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "useBrowser",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "scope",
				"value": "ugc-image-upload user-read-recently-played user-top-read user-read-playback-position user-read-playback-state user-modify-playback-state user-read-currently-playing playlist-modify-public playlist-modify-private playlist-read-private playlist-read-collaborative user-follow-modify user-follow-read user-library-modify user-library-read user-read-email user-read-private",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://panorama-izhevsk.ru/",
				"type": "string"
			},
			{
				"key": "state",
				"value": "",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "Spotify Token",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "header",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "https://accounts.spotify.com/api/token",
				"type": "string"
			},
			{
				"key": "headerPrefix",
				"value": "Basic",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "4540246de42048fe907bba2a80771a15",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "0a40d08e189742b4a2616d7b19088b1c",
				"type": "string"
			},
			{
				"key": "password",
				"value": "12345678901990",
				"type": "string"
			},
			{
				"key": "username",
				"value": "tw2ojre6f2nxkxi3i118kxbty",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://accounts.spotify.com/authorize",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "queryParams",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}